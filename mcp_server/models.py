# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T07:58:11+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import AnyUrl, BaseModel, Field, conint


class ActionHelp(BaseModel):
    action_id: str = Field(
        ..., description='A unique one word identifier for the action.'
    )
    help_text: str = Field(..., description='The help text for the action.')
    service_id: str = Field(
        ..., description='A unique one word identifier for the service.'
    )


class Status(Enum):
    success = 'success'


class ActionHelpResponse(BaseModel):
    api: str = Field(..., description='The path of the REST API method')
    method: str = Field(..., description='The name of the REST API method')
    response: ActionHelp
    status: Status


class HttpMethod(Enum):
    GET = 'GET'
    PUT = 'PUT'
    POST = 'POST'
    DELETE = 'DELETE'


class Type(Enum):
    query = 'query'
    header = 'header'
    uri = 'uri'
    path = 'path'
    body = 'body'


class EntryPointParameter(BaseModel):
    description: str = Field(
        ...,
        description='A short description of the parameter for use in the OSDB Action Console. Optional - may be null.',
    )
    display_name: str = Field(
        ...,
        description="The parameter's display name in the OSDB Action Console. Optional - may be null.",
    )
    parameter_name: str = Field(
        ...,
        description='The parameter name as present in the HTTP request. e.g. the key name in a query string key-value pair.',
    )
    permitted_values: List[str] = Field(
        ...,
        description='If the parameter accepts only a limited set of values, the allowed set of values. Null if not applicable.',
    )
    required: conint(ge=0, le=1) = Field(
        ..., description='A flag indicating if the parameter is optional.'
    )
    type: Type = Field(
        ...,
        description='The type of the parameter, indicating its location in the HTTP request.',
    )


class Status3(Enum):
    error = 'error'


class ErrorModel(BaseModel):
    api: Optional[str] = Field(
        None, description='The path of the REST API method reporting the error'
    )
    method: Optional[str] = Field(
        None, description='The name of the REST API method reporting the error'
    )
    response: Optional[str] = Field(None, description='A message describing the error')
    status: Optional[Status3] = 'error'


class OsdbOutputType(Enum):
    url_only = 'url_only'
    generate_rdf = 'generate_rdf'
    display_rdf = 'display_rdf'


class ExecBody(BaseModel):
    action_specific_property1: Optional[str] = Field(
        None,
        description='An example action specific property. There may be 0, 1 or more action specific properties, each holding an action specific parameter value.',
    )
    action_specific_property2: Optional[str] = Field(
        None,
        description='An example action specific property. There may be 0, 1 or more action specific properties, each holding an action specific parameter value.',
    )
    osdb_body_data_encoding: Optional[str] = Field(
        None,
        alias='osdb:body_data_encoding',
        description='The media type of the data associated with osdb:body_data_raw or osdb:body_data_src_url. In the case of osdb:body_data_raw, this is the media type before base64 encoding.',
    )
    osdb_body_data_raw: Optional[str] = Field(
        None,
        alias='osdb:body_data_raw',
        description='Input data for the action (e.g. CSV data). The data must be base64 encoded by the client. Alternatively, clients can use osdb:body_data_src_url to supply the input data via a web-accessible document.',
    )
    osdb_body_data_src_url: Optional[AnyUrl] = Field(
        None,
        alias='osdb:body_data_src_url',
        description='URL of a resource containing input data for the action (e.g. CSV data). Clients can instead use osdb:body_data_raw to supply the input data directly.',
    )
    osdb_output_type: Optional[OsdbOutputType] = Field(
        None,
        alias='osdb:output_type',
        description='An OSDB-specific parameter controlling the action output type. If omitted, the native action output is returned.',
    )
    osdb_response_format: Optional[str] = Field(
        None,
        alias='osdb:response_format',
        description="Preferred response MIME type. This must be an output MIME type supported natively by the action or, if 'osdb:output_type' is set to 'generate_rdf', a Virtuoso Sponger output format. i.e. 'application/ld+json', 'text/turtle' or 'application/rdf+xml'.",
    )


class Status4(Enum):
    success = 'success'


class Response(BaseModel):
    user: str = Field(..., description='The WebID of the user who has logged in.')


class LoginResponse(BaseModel):
    api: str = Field(..., description='The path of the REST API method')
    method: str = Field(..., description='The name of the REST API method')
    response: Response
    status: Status4


class Response1(BaseModel):
    user: str = Field(..., description='The WebID of the user who has logged out.')


class LogoutResponse(BaseModel):
    api: str = Field(..., description='The path of the REST API method')
    method: str = Field(..., description='The name of the REST API method')
    response: Response1
    status: Status4


class ServiceDescription(BaseModel):
    description: Optional[str] = Field(
        None, description='A short description of the service.'
    )
    import_source_uri: AnyUrl = Field(
        ...,
        description='The URI of the source service description document used to load the service into OSDB.',
    )
    service_id: str = Field(
        ..., description='A unique one word identifier for the service.'
    )
    service_name: str = Field(..., description='A word or phrase naming the service.')


class ApiV1ServicesPostRequest(BaseModel):
    service_description_url: str = Field(
        ...,
        description='The URL of the resource containing the service description to load.',
    )
    service_moniker: Optional[str] = Field(
        None,
        description='Service ID to be used to uniquely identify the service. (Optional: Required for anonymous services or to override the service name in the service description.)',
    )


class ApiV1ServicesPostResponse(BaseModel):
    api: str = Field(..., description='The path of the REST API method')
    method: str = Field(..., description='The name of the REST API method')
    response: str = Field(..., description='Confirmation message')
    status: Status4


class ApiV1ServicesServiceIdDeleteResponse(BaseModel):
    api: str = Field(..., description='The path of the REST API method')
    method: str = Field(..., description='The name of the REST API method')
    response: str = Field(..., description='Confirmation message')
    status: Status4


class DescribeServiceResponse(BaseModel):
    api: str = Field(..., description='The path of the REST API method')
    method: str = Field(..., description='The name of the REST API method')
    response: ServiceDescription
    status: Status


class EntryPoint(BaseModel):
    content_types: List[str] = Field(
        ..., description='The supported MIME type(s) for an EntryPoint response.'
    )
    description: str = Field(
        ..., description='A short description of the action. Optional - may be null.'
    )
    encoding_types: List[str] = Field(
        ...,
        description='The supported MIME type(s) for an EntryPoint request. Null if not applicable.',
    )
    http_method: HttpMethod = Field(
        ..., description='The HTTP method used by the EntryPoint.'
    )
    name: str = Field(
        ...,
        description="A word or short phrase to be used as the action's display name. Optional - may be null.",
    )
    parameters: List[EntryPointParameter] = Field(
        ...,
        description='Descriptions of the EntryPoint parameters. Null if not applicable.',
    )
    url: AnyUrl = Field(
        ...,
        description='The EntryPoint URL. It will be non-null if url_template is null.',
    )
    url_template: str = Field(
        ...,
        description="The EntryPoint's URL template. Only required if the entry point URL is parameterized. Property 'url' will be null if url_template is non-null.",
    )


class ListServicesResponse(BaseModel):
    api: str = Field(..., description='The path of the REST API method')
    method: str = Field(..., description='The name of the REST API method')
    response: List[ServiceDescription]
    status: Status4


class ActionDescription(BaseModel):
    action_id: str = Field(
        ..., description='A unique one word identifier for the action.'
    )
    description: Optional[str] = Field(
        None, description='A short description of the action.'
    )
    entry_point: EntryPoint


class DescribeActionResponse(BaseModel):
    api: str = Field(..., description='The path of the REST API method')
    method: str = Field(..., description='The name of the REST API method')
    response: ActionDescription
    status: Status


class ListActionsResponse(BaseModel):
    api: str = Field(..., description='The path of the REST API method')
    method: str = Field(..., description='The name of the REST API method')
    response: List[ActionDescription]
    status: Status4
