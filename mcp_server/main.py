# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T07:58:11+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Path

from models import (
    ActionHelpResponse,
    ApiV1ServicesPostRequest,
    ApiV1ServicesPostResponse,
    ApiV1ServicesServiceIdDeleteResponse,
    DescribeActionResponse,
    DescribeServiceResponse,
    ErrorModel,
    ExecBody,
    ListActionsResponse,
    ListServicesResponse,
    LoginResponse,
    LogoutResponse,
)

app = MCPProxy(
    contact={'email': 'osdb@openlinksw.com', 'x-twitter': 'OpenLink'},
    description='An OpenAPI description of the OpenLink Smart Data Bot REST API v1',
    license={
        'name': 'CC-BY-SA',
        'url': 'https://creativecommons.org/licenses/by-sa/3.0/legalcode',
    },
    title='OSDB REST API v1',
    version='1.0.0',
    servers=[
        {'description': 'OSDB demo server', 'url': 'https://osdb.openlinksw.com/osdb'}
    ],
)


@app.get(
    '/api/v1/actions/{serviceId}',
    description=""" Returns an array of action descriptions for the actions supported by the given service """,
    tags=['action_execution', 'service_control'],
)
def list_actions(service_id: str = Path(..., alias='serviceId')):
    """
    List actions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/actions/{serviceId}/{actionId}',
    description=""" Returns a description of a given service action. """,
    tags=['action_execution', 'service_control'],
)
def describe_action(
    service_id: str = Path(..., alias='serviceId'),
    action_id: str = Path(..., alias='actionId'),
):
    """
    Describe action
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v1/actions/{serviceId}/{actionId}/exec',
    description=""" Executes a registered service action and returns any output from the action.
The data returned in the POST response body may be: 
* the raw action output, 
* a URL encapsulating the action request which executes the action when dereferenced  (only for actions using GET), 
* RDF generated from the action output,
* a URL to an RDF viewer's display of the generated RDF.

Any parameters required by the action are supplied as a JSON object in the POST body. The parameter types supported are: "query", "header", "uri", "path" and "body".  The parameter type determines where a supplied parameter value is inserted into the HTTP request constructed by OSDB to invoke the target service action. In addition to native parameters required by the service action, 'Execute action' accepts some OSDB-specific parameters.<br/><br/>

**Examples**
* ```curl -ik -X POST -d '{ "latitude":"37.7759792", "longitude":"-122.41823" }' -H 'Content-Type: application/json' https://osdb.openlinksw.com/osdb/api/v1/actions/uber/products/exec```  
* ```curl -ikL -X POST -d '{ "latitude":"37.7759792", "longitude":"-122.41823", "osdb:output_type":"generate_rdf", "osdb:response_format":"application/rdf+xml" }' -H 'Content-Type: application/json' https://osdb.openlinksw.com/osdb/api/v1/actions/uber/products/exec``` 
* ```curl -ikL -X POST -d '{ "latitude":"37.7759792", "longitude":"-122.41823", "osdb:output_type":"display_rdf" }' -H 'Content-Type: application/json' https://osdb.openlinksw.com/osdb/api/v1/actions/uber/products/exec``` 
* ```curl -ik -X POST -d '{ "q":"skiing", "osdb:response_format": "application/rdf+xml" }' -H 'Content-Type: application/json' https://osdb.openlinksw.com/osdb/api/v1/actions/facet/search/exec``` 
* ```curl -ik -X POST -d '{ "q":"skiing", "osdb:output_type": "url_only" }' -H 'Content-Type: application/json' https://osdb.openlinksw.com/osdb/api/v1/actions/facet/search/exec``` 
* ```curl -ik -X POST -d '{ "Content-Location": "http://demo.openlinksw.co.uk/pubs", "osdb:body_data_src_url": "http://ods-qa.openlinksw.com/DAV/home/osdb/pubs.csv", "extractor": "csv", "osdb:response_format": "application/rdf+xml", "osdb:body_data_encoding": "text/csv" }' -H 'Content-Type: application/json' https://osdb.openlinksw.com/osdb/api/v1/actions/csv_transformer/transform/exec``` """,
    tags=['action_execution', 'service_control'],
)
def execute_action(
    service_id: str = Path(..., alias='serviceId'),
    action_id: str = Path(..., alias='actionId'),
    body: ExecBody = None,
):
    """
    Execute action
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/actions/{serviceId}/{actionId}/help',
    description=""" Returns the help text for a given service action """,
    tags=['action_execution', 'service_control'],
)
def action_help(
    service_id: str = Path(..., alias='serviceId'),
    action_id: str = Path(..., alias='actionId'),
):
    """
    Action help
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/login',
    description=""" Logs a user into the OSDB server, authenticating them by their WebID and returning an OSDB session ID in cookie osdb.sid """,
    tags=['user_login_management'],
)
def login():
    """
    Login
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/logout',
    description=""" Logs a user out of the OSDB server, ending their OSDB session """,
    tags=['user_login_management'],
)
def logout():
    """
    Logout
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/services',
    description=""" Returns descriptions of all services registered with the OSDB server. """,
    tags=['service_control'],
)
def list_services():
    """
    List services
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v1/services',
    description=""" Loads a service description into the OSDB Service Registry """,
    tags=['service_control'],
)
def load_service(body: ApiV1ServicesPostRequest = None):
    """
    Load service
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v1/services/{serviceId}',
    description=""" Removes a service description from the OSDB Service Registry """,
    tags=['service_control'],
)
def unload_service(service_id: str = Path(..., alias='serviceId')):
    """
    Unload service
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/services/{serviceId}',
    description=""" Returns a description of a given service """,
    tags=['service_control'],
)
def describe_service(service_id: str = Path(..., alias='serviceId')):
    """
    Describe service
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
